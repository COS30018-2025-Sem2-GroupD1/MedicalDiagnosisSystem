# 1. Start with a base image
# This tells Docker to start with an official Python 3.9 image.
# The "-slim" variant is a good practice as it's smaller than the full version.
FROM python:3.9-slim

# 2. Set the working directory inside the container
# This is where your application's code will live inside the container.
WORKDIR /app

# 3. Copy only the dependency file first
# This is a key optimization. Docker caches layers. As long as your requirements.txt doesn't change,
# Docker won't re-install the dependencies every time you build the image, saving a lot of time.
COPY requirements.txt .

# 4. Install the dependencies
# This command reads the requirements.txt file and installs all the necessary Python libraries.
# The --no-cache-dir flag helps keep the image size smaller.
RUN pip install --no-cache-dir -r requirements.txt

# 5. Copy the rest of your application code
# Now, copy all the files from your project directory into the container's /app directory.
COPY ./app ./app

# 6. Expose the port the app runs on
# This informs Docker that the container listens on port 8000.
# FastAPI's default development server (Uvicorn) often uses this port.
EXPOSE 8000

# 7. Define the command to run the application
# This is the command that will be executed when the container starts.
# It tells Uvicorn to run the FastAPI application defined in the 'main.py' file.
# The host 0.0.0.0 makes the server accessible from outside the container.
CMD ["uvicorn", "app.main:app", "--host", "0.0.0.0", "--port", "8000"]
